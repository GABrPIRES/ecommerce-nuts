// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) // Identificador único
  name      String // Nome do usuário
  email     String    @unique // E-mail único
  password  String // Senha
  orders    Order[] // Relacionamento com pedidos
  addresses Address[] // Relacionamento com endereços
  createdAt DateTime  @default(now()) // Data de criação
}

model Product {
  id            String          @id @default(uuid()) // Identificador único
  name          String // Nome do produto
  description   String // Descrição detalhada do produto
  price         Float // Preço do produto
  image1        String // URL da primeira imagem do produto
  image2        String // URL da segunda imagem do produto
  stock         Int // Quantidade disponível em estoque
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  createdAt     DateTime        @default(now()) // Data de criação do produto
  updatedAt     DateTime        @updatedAt // Data de última atualização
  StockMovement StockMovement[]
  OrderItem     OrderItem[]
}

model Category {
  id        String    @id @default(uuid()) // Identificador único
  name      String // Nome da categoria (ex.: Castanhas, Mixes)
  products  Product[] // Relacionamento com produtos
  createdAt DateTime  @default(now()) // Data de criação da categoria
}

model StockMovement {
  id        String   @id @default(uuid()) // Identificador único
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String // Tipo de movimentação: "entrada" ou "saída"
  quantity  Int // Quantidade movimentada
  createdAt DateTime @default(now()) // Data da movimentação
}

model Order {
  id        String      @id @default(uuid()) // Identificador único
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  status    String      @default("pending") // Status do pedido: pending, shipped, delivered, canceled
  total     Float // Valor total do pedido
  items     OrderItem[] // Relacionamento com os itens do pedido
  createdAt DateTime    @default(now()) // Data de criação do pedido
}

model OrderItem {
  id        String  @id @default(uuid()) // Identificador único
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int // Quantidade do produto
  price     Float // Preço do produto na hora do pedido
}

model Address {
  id        String   @id @default(uuid()) // Identificador único
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  street    String // Rua
  city      String // Cidade
  state     String // Estado
  zipCode   String // CEP
  country   String // País
  createdAt DateTime @default(now()) // Data de criação
}
